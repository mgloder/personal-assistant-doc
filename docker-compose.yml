version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/little_dragon
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8005/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8005
      - PORT=3001
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_next:/app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_DB=0
      # Celery Configuration
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TIMEZONE=UTC
      - CELERY_ENABLE_UTC=True
      - CELERY_TASK_TRACK_STARTED=True
      - CELERY_TASK_TIME_LIMIT=1800
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=100
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      # Logging Configuration
      - LOG_LEVEL=DEBUG
    volumes:
      - ./worker:/app
    depends_on:
      - redis
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=little_dragon
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d little_dragon"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  frontend_next:
  postgres_data: 